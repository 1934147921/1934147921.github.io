<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>categories</title>
    <url>/2020/09/18/categories/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>first blog</title>
    <url>/2020/09/17/first-blog/</url>
    <content><![CDATA[<h2 id="数据结构第三章-栈与队列-stack-or-queue-的代码实现"><a href="#数据结构第三章-栈与队列-stack-or-queue-的代码实现" class="headerlink" title="数据结构第三章-栈与队列(stack or queue)的代码实现"></a>数据结构第三章-栈与队列(stack or queue)的代码实现</h2><ul>
<li><p>运行环境：VS2017</p>
</li>
<li><p>调试情况：书中给出的数据均可实现</p>
</li>
</ul>
<h3 id="一、栈的实现与基本操作"><a href="#一、栈的实现与基本操作" class="headerlink" title="一、栈的实现与基本操作"></a>一、栈的实现与基本操作</h3><h4 id="1、栈的链式存储结构"><a href="#1、栈的链式存储结构" class="headerlink" title="1、栈的链式存储结构"></a>1、栈的链式存储结构</h4><p>​        栈的链式存储结构用双向链表加一个头指针、一个尾指针即可实现。用链式存储结构写栈的基本操作很简单即不在这附上具体代码，放一个结构体即可：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">&#125;SElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> * <span class="title">prior</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;STNode,*pSNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    pSNode base;	<span class="comment">//指向头结点</span></span><br><span class="line">    pSNode top;		<span class="comment">//指向为结点</span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure>

<p>​        </p>
<h4 id="2、栈的顺序存储结构——基本操作"><a href="#2、栈的顺序存储结构——基本操作" class="headerlink" title="2、栈的顺序存储结构——基本操作"></a>2、栈的顺序存储结构——基本操作</h4><p>​        严奶奶的书中具体介绍的是顺序存储结构为主，在这具体实现的代码便是栈的顺序存储结构。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Stack.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> true 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> STACK_INIT_SIZE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> STACKINCREMENT = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">&#125;SElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	SElemType *base;</span><br><span class="line">	SElemType *top;</span><br><span class="line">	<span class="keyword">int</span> stacksize;</span><br><span class="line"></span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈基本操作</span></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>;			<span class="comment">//构建栈</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyStack</span><span class="params">(SqStack &amp;S)</span></span>;		<span class="comment">//销毁栈</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ClearStack</span><span class="params">(SqStack &amp;S)</span></span>;			<span class="comment">//若栈存在，将栈清空</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>;			<span class="comment">//判断栈是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>    <span class="title">StackLength</span><span class="params">(SqStack S)</span></span>;			<span class="comment">//返回栈的长度</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GetTop</span><span class="params">(SqStack S, SElemType &amp;e)</span></span>; <span class="comment">//查看栈顶元素</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack &amp;S, SElemType e)</span></span>;	<span class="comment">//进栈</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;S, SElemType &amp;e)</span></span>;	<span class="comment">//出栈</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">StackTraverse</span><span class="params">(SqStack S)</span></span>;		<span class="comment">//遍历栈</span></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span>			<span class="comment">//构建栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S.base = (SElemType *)<span class="built_in">malloc</span>(STACK_INIT_SIZE *<span class="keyword">sizeof</span>(SElemType));</span><br><span class="line">	<span class="keyword">if</span> (!S.base) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	S.top = S.base;</span><br><span class="line">	S.stacksize = STACK_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack S)</span><span class="comment">//判断栈是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> ok;</span><br><span class="line">	<span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">DestroyStack</span><span class="params">(SqStack &amp;S)</span>			<span class="comment">//销毁栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">free</span>(S.base);</span><br><span class="line">	S.base = <span class="literal">NULL</span>;</span><br><span class="line">	S.stacksize = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ClearStack</span><span class="params">(SqStack &amp;S)</span>			<span class="comment">//若栈存在，将栈清空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (StackEmpty(S)) <span class="keyword">return</span> ok;</span><br><span class="line">	<span class="keyword">while</span> (!StackEmpty(S))</span><br><span class="line">		--S.top;</span><br><span class="line">	<span class="comment">//S.stacksize = 0;</span></span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>    <span class="title">StackLength</span><span class="params">(SqStack S)</span>			<span class="comment">//返回栈的长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	i = S.top - S.base;</span><br><span class="line">	<span class="comment">/*while (p != S.top)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		++p;</span></span><br><span class="line"><span class="comment">		++i;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">GetTop</span><span class="params">(SqStack S, SElemType &amp;e)</span> <span class="comment">//查看栈顶元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (StackEmpty(S)) <span class="keyword">return</span> ERROR;</span><br><span class="line">	SElemType *p;</span><br><span class="line">	p = S.top;</span><br><span class="line">	--p;</span><br><span class="line">	e = *p;</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack &amp;S, SElemType e)</span> <span class="comment">//进栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.top - S.base &gt;= S.stacksize)</span><br><span class="line">	&#123;</span><br><span class="line">		S.base = (SElemType *)<span class="built_in">realloc</span>(S.base,(S.stacksize+ STACKINCREMENT)*<span class="keyword">sizeof</span>(SElemType));</span><br><span class="line">		<span class="keyword">if</span> (!S.base) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		S.top = S.base+S.stacksize;</span><br><span class="line">		S.stacksize = S.stacksize + STACKINCREMENT;</span><br><span class="line">	&#125;</span><br><span class="line">	*S.top = e;</span><br><span class="line">	++S.top;</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;S, SElemType &amp;e)</span> <span class="comment">//出栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (StackEmpty(S)) <span class="keyword">return</span> ERROR;</span><br><span class="line">	--S.top;</span><br><span class="line">	e = *S.top;</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">StackTraverse</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SElemType *p = S.base;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == S.base)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	<span class="keyword">while</span> (p &lt; S.top)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;data);</span><br><span class="line">		++p;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3、栈的应用举例"><a href="#3、栈的应用举例" class="headerlink" title="3、栈的应用举例"></a>3、栈的应用举例</h4><p>​        严奶奶书中栈的应用有五个小实例，在这一一放出具体的实现代码。</p>
<p><img src="C:\Users\19341\Desktop\stack.png"></p>
<p>​        </p>
<h5 id="3-1、数值转换"><a href="#3-1、数值转换" class="headerlink" title="3.1、数值转换"></a>3.1、数值转换</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SElemType结构体数据发生改变</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">&#125;SElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除基本函数外还需导入一下函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">conversion</span><span class="params">(SElemType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试的为二进制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">conversion</span><span class="params">(SElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqStack S;</span><br><span class="line">	InitStack(S);</span><br><span class="line">	<span class="keyword">int</span> N = e.data;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (N)</span><br><span class="line">	&#123;</span><br><span class="line">		e.data = N%<span class="number">2</span>;</span><br><span class="line">		Push(S, e);</span><br><span class="line">		N = N / <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!StackEmpty(S))</span><br><span class="line">	&#123;</span><br><span class="line">		Pop(S, e);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, e.data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-2、括号匹配监验"><a href="#3-2、括号匹配监验" class="headerlink" title="3.2、括号匹配监验"></a>3.2、括号匹配监验</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">&#125;SElemType;</span><br><span class="line"><span class="comment">//括号匹配监测</span></span><br><span class="line"><span class="comment">//()、[]</span></span><br><span class="line"><span class="function">Status <span class="title">matching</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">matching</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	SqStack S;</span><br><span class="line">	InitStack(S);</span><br><span class="line">	SElemType e;</span><br><span class="line">	SElemType ea;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= n)<span class="comment">//n 为数组长度  i为数组下标</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">switch</span> (a[i])</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>: </span><br><span class="line">			e.data = a[i];</span><br><span class="line">			Push(S, e);</span><br><span class="line">			i++;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">			e.data = a[i];</span><br><span class="line">			Push(S, e);</span><br><span class="line">			i++;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">			 GetTop(S, ea);</span><br><span class="line">			<span class="keyword">if</span> (ea.data == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				Pop(S,ea);</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> i++;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">			 GetTop(S, ea);</span><br><span class="line">			<span class="keyword">if</span> (ea.data == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				Pop(S, ea);</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> i++;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (StackEmpty(S)) <span class="keyword">return</span> ok;</span><br><span class="line">	<span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-3、行编辑程序"><a href="#3-3、行编辑程序" class="headerlink" title="3.3、行编辑程序"></a>3.3、行编辑程序</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//行编辑</span></span><br><span class="line"><span class="comment">//# 为退格符、@ 为退行符</span></span><br><span class="line"><span class="function">Status <span class="title">LineEdit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">LineEdit</span><span class="params">()</span><span class="comment">//不知道 EOF 的退出条件是什么</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqStack S;</span><br><span class="line">	SElemType e;</span><br><span class="line">	InitStack(S);</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	ch = getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch != <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (ch != <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">switch</span>(ch)</span><br><span class="line">			&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:Pop(S, e); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;@&#x27;</span>:ClearStack(S); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				e.data = ch;</span><br><span class="line">				Push(S, e);</span><br><span class="line">			&#125;</span><br><span class="line">			ch = getchar();</span><br><span class="line">		&#125;</span><br><span class="line">		StackTraverse(S);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">		ClearStack(S);</span><br><span class="line">		<span class="keyword">if</span>(ch!= <span class="string">&#x27;0&#x27;</span>) ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	DestroyStack(S);</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h5 id="3-4、迷宫求解"><a href="#3-4、迷宫求解" class="headerlink" title="3.4、迷宫求解"></a>3.4、迷宫求解</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">&#125;PosType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> ord;		<span class="comment">//序号</span></span><br><span class="line">	PosType seat;	<span class="comment">//坐标位置</span></span><br><span class="line">	<span class="keyword">int</span> di;			<span class="comment">//方向</span></span><br><span class="line">&#125;SElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment">	迷宫求解-需要的所有函数.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	0:路，可通过</span></span><br><span class="line"><span class="comment">	1:墙，不可通过;且同时作为不能通过的标记</span></span><br><span class="line"><span class="comment">	2:沿途的标记</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">Pass</span><span class="params">(PosType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FootPrint</span><span class="params">(PosType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">PosType <span class="title">NextPos</span><span class="params">(PosType e, <span class="keyword">int</span> N)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MarkPrint</span><span class="params">(PosType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">MazePath</span><span class="params">(PosType start, PosType end)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Pass</span><span class="params">(PosType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> N = carry[e.i][e.j];</span><br><span class="line">	<span class="keyword">if</span> (!N) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FootPrint</span><span class="params">(PosType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	carry[e.i][e.j] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PosType <span class="title">NextPos</span><span class="params">(PosType e, <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">switch</span> (N)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		e.j = e.j + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		e.i = e.i + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		e.j = e.j - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		e.i = e.i - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MarkPrint</span><span class="params">(PosType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	carry[e.i][e.j] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">MazePath</span><span class="params">(PosType start, PosType end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqStack S;</span><br><span class="line">	InitStack(S);</span><br><span class="line">	SElemType e;</span><br><span class="line">	PosType curpos;</span><br><span class="line">	curpos = start;		<span class="comment">//设置“当前位置”为“入口位置”</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> curstep = <span class="number">1</span>;	<span class="comment">//步数</span></span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (Pass(curpos)) &#123;</span><br><span class="line">			FootPrint(curpos);	<span class="comment">//标记</span></span><br><span class="line">			e.ord = curstep;</span><br><span class="line">			e.seat = curpos;</span><br><span class="line">			e.di = <span class="number">1</span>;</span><br><span class="line">			Push(S, e);</span><br><span class="line">			<span class="keyword">if</span> ((curpos.i == end.i) &amp;&amp; (curpos.j == end.j)) &#123; StackTraverse(S); <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">			curpos = NextPos(curpos, <span class="number">1</span>);</span><br><span class="line">			curstep++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!StackEmpty(S))</span><br><span class="line">			&#123;</span><br><span class="line">				Pop(S,e);</span><br><span class="line">				<span class="keyword">while</span> (e.di == <span class="number">4</span> &amp;&amp; !StackEmpty(S))</span><br><span class="line">				&#123;</span><br><span class="line">					MarkPrint(e.seat);</span><br><span class="line">					Pop(S, e);</span><br><span class="line">				&#125;<span class="comment">//while</span></span><br><span class="line">				<span class="keyword">if</span> (e.di &lt; <span class="number">4</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					e.di++;</span><br><span class="line">					Push(S, e);</span><br><span class="line">					curpos = NextPos(e.seat, e.di);</span><br><span class="line"></span><br><span class="line">				&#125;<span class="comment">//if</span></span><br><span class="line">			&#125;<span class="comment">//if</span></span><br><span class="line"></span><br><span class="line">		&#125;<span class="comment">//else</span></span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">while</span> (!StackEmpty(S));</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-5、表达式求值"><a href="#3-5、表达式求值" class="headerlink" title="3.5、表达式求值"></a>3.5、表达式求值</h5><p>​        严奶奶书中的原程序，输入的是一段字符串，加减一直ASCii值相加减，我想不出来，加减的操作数应该是整形，操作符号应该是字符型，肯定不能放在相同类型的栈里面。</p>
<p>​        自己想出来的方法是在定义一个int类型数组(这个数组模拟栈的先进后出模式)将操作数放在整形数组里面，将操作符放在原先定义的栈里面。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">&#125;SElemType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式求值</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> OPerandType;</span><br><span class="line"></span><br><span class="line">OPerandType OPND[<span class="number">50</span>];</span><br><span class="line">OPerandType iod=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="function">Status <span class="title">In</span><span class="params">(<span class="keyword">char</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Precede</span><span class="params">(SElemType e, <span class="keyword">char</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">OPerandType <span class="title">Operate</span><span class="params">(OPerandType a, <span class="keyword">char</span> theta, OPerandType b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">OPerandType <span class="title">EvaluateExpression</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Num</span><span class="params">(<span class="keyword">char</span> *b, <span class="keyword">int</span> i)</span></span>;<span class="comment">//数值转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//具体代码实现</span></span><br><span class="line"><span class="function">Status <span class="title">In</span><span class="params">(<span class="keyword">char</span> c)</span>  <span class="comment">//判断是否是数字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">switch</span> (c)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Precede</span><span class="params">(SElemType e, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> xita[] = &#123; <span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;#&#x27;</span> &#125;;</span><br><span class="line">	<span class="keyword">char</span> sita[<span class="number">7</span>][<span class="number">7</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123; <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;0&#x27;</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">		&#123; <span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;=&#x27;</span> &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;<span class="number">7</span>;p++)</span><br><span class="line">		<span class="keyword">if</span> (xita[p] == e.data)</span><br><span class="line">		&#123;</span><br><span class="line">			i = p;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">7</span>; p++)</span><br><span class="line">		<span class="keyword">if</span> (xita[p] == c)</span><br><span class="line">		&#123;</span><br><span class="line">			j = p;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> sita[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">OPerandType <span class="title">Operate</span><span class="params">(OPerandType a, <span class="keyword">char</span> theta, OPerandType b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	OPerandType sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">switch</span> (theta)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:sum = a + b; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:sum = a - b; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:sum = a * b; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:sum = a / b; <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Num</span><span class="params">(<span class="keyword">char</span> *b, <span class="keyword">int</span> i)</span><span class="comment">//数值转换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> s = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (p = <span class="number">1</span>; p &lt; i; p++)</span><br><span class="line">		s = s * <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; i; p++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum = (b[p] - <span class="string">&#x27;0&#x27;</span>) * s + sum;</span><br><span class="line">		s = s / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">OPerandType <span class="title">EvaluateExpression</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> charNum[<span class="number">100</span>]; </span><br><span class="line">	<span class="keyword">int</span> ic = <span class="number">0</span>;</span><br><span class="line">	SqStack OPTR; </span><br><span class="line">	InitStack(OPTR);</span><br><span class="line">	SElemType e, d, x, e1, theta;</span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	e.data = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	Push(OPTR, e);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">	<span class="keyword">char</span> c = getchar();</span><br><span class="line">	GetTop(OPTR, e1);</span><br><span class="line">	<span class="keyword">while</span> (c != <span class="string">&#x27;#&#x27;</span> ||  e1.data!= <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!In(c))</span><br><span class="line">		&#123;</span><br><span class="line">			charNum[ic] = c;</span><br><span class="line">			++ic;</span><br><span class="line">			c = getchar();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (ic != <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				OPND[iod] = Num(charNum, ic);</span><br><span class="line">				++iod;</span><br><span class="line">				ic = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			GetTop(OPTR, e1);</span><br><span class="line">			<span class="keyword">switch</span> (Precede(e1, c))</span><br><span class="line">			&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">				e.data = c;</span><br><span class="line">				Push(OPTR, e);</span><br><span class="line">				c = getchar();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">				Pop(OPTR, x);</span><br><span class="line">				c = getchar(); </span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">				Pop(OPTR, theta);</span><br><span class="line">				b = OPND[--iod];</span><br><span class="line">				a = OPND[--iod];</span><br><span class="line">				OPND[iod] = Operate(a, theta.data, b);</span><br><span class="line">				++iod;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;<span class="comment">//switch</span></span><br><span class="line">			GetTop(OPTR, e1);</span><br><span class="line">		&#125;<span class="comment">//while</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OPND[--iod];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong>严奶奶的书中的代码除看不理解，再看就闷逼、反复思考把里面的具体操作弄懂之后。在看书中的伪代码，才发现，代码虽然在机器上具体实现了，但是具体功能的核心代码却不是自己想出来的，初实现的时候还很开心，开心过后就会发现有些失落，感觉自己写出了很多的没用的代码，书中的代码就很简洁、直观，足以。</p>
<p>写出来也只是给自己的一份锻炼吧。</p>
<h3 id="二、队的实现与基本操作"><a href="#二、队的实现与基本操作" class="headerlink" title="二、队的实现与基本操作"></a>二、队的实现与基本操作</h3><h4 id="1、队的链式存储结构"><a href="#1、队的链式存储结构" class="headerlink" title="1、队的链式存储结构"></a>1、队的链式存储结构</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> true 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0;</span></span><br><span class="line"><span class="comment">//#define MAXSIZE 100;</span></span><br><span class="line"><span class="keyword">int</span> MAXSIZE = <span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> e;</span><br><span class="line">&#125;QueueElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	QueueElemType *base;</span><br><span class="line">	<span class="keyword">int</span> front;</span><br><span class="line">	<span class="keyword">int</span> rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(SqQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueEmpty</span><span class="params">(SqQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLenth</span><span class="params">(SqQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GEtaHead</span><span class="params">(SqQueue &amp;Q, QueueElemType &amp;e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q, QueueElemType e)</span></span>;	<span class="comment">//插入元素-&gt;进队</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q, QueueElemType &amp;e)</span></span>;	<span class="comment">//删除元素-&gt;出队</span></span><br><span class="line">	</span><br><span class="line"><span class="function">Status <span class="title">QueueTraverse</span><span class="params">(SqQueue Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Q.base = (QueueElemType  *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QueueElemType)*MAXSIZE);</span><br><span class="line">	<span class="keyword">if</span> (!Q.base) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">	Q.front = <span class="number">0</span>;</span><br><span class="line">	Q.rear = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLenth</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (Q.rear - Q.front + MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q, QueueElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MAXSIZE == Q.front) <span class="keyword">return</span> ERROR;</span><br><span class="line">	Q.base[Q.rear] = e;</span><br><span class="line">	Q.rear = (Q.rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q, QueueElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear) <span class="keyword">return</span> ERROR;</span><br><span class="line">	e = Q.base[Q.front];</span><br><span class="line">	Q.front = (Q.front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!Q.base)</span><br><span class="line">		<span class="keyword">return</span> ok;</span><br><span class="line">	<span class="built_in">free</span>(Q.base);</span><br><span class="line">	Q.base = <span class="literal">NULL</span>;</span><br><span class="line">	Q.front = <span class="number">0</span>;</span><br><span class="line">	Q.rear = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueEmpty</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear) <span class="keyword">return</span> ok;</span><br><span class="line">	<span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GEtaHead</span><span class="params">(SqQueue &amp;Q, QueueElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (QueueEmpty(Q)) <span class="keyword">return</span> ERROR;</span><br><span class="line">	e = Q.base[Q.front];</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueTraverse</span><span class="params">(SqQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = Q.front;</span><br><span class="line">	<span class="keyword">while</span> (i != Q.rear)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Q.base[i]);</span><br><span class="line">		i = (i + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、队的顺序存储——循环队列"><a href="#2、队的顺序存储——循环队列" class="headerlink" title="2、队的顺序存储——循环队列"></a>2、队的顺序存储——循环队列</h4><ul>
<li><p>求队长的公式：(Q.rear-Q.front+MAXSIZE)%MAXSIZE</p>
</li>
<li><p>队尾插入数据队满条件：(Q.rear+1)%MAXSIZE==Q.front</p>
</li>
<li><p>对头对尾下标加一：Q.front=(Q.front+1)%MAXSIZE</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> e;</span><br><span class="line">&#125;QElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> &#123;</span></span><br><span class="line">	QElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;QNode,*pQueuePtr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	pQueuePtr front;	<span class="comment">//队头指针</span></span><br><span class="line"></span><br><span class="line">	pQueuePtr rear;		<span class="comment">//队尾指针</span></span><br><span class="line"></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueEmpty</span><span class="params">(LinkQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLenth</span><span class="params">(LinkQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GEtaHead</span><span class="params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, QElemType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueTraverse</span><span class="params">(LinkQueue Q)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Q.front = Q.rear = (pQueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">	<span class="keyword">if</span> (!Q.front) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">	Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (Q.front)</span><br><span class="line">	&#123;</span><br><span class="line">		Q.rear = Q.front-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(Q.front);</span><br><span class="line">		Q.front = Q.rear;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, QElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pQueuePtr p;</span><br><span class="line">	p = (pQueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">	<span class="keyword">if</span> (!p) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">	p-&gt;data = e;</span><br><span class="line">	p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	Q.rear-&gt;next = p;</span><br><span class="line">	Q.rear = p;</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear) <span class="keyword">return</span> ERROR;</span><br><span class="line">	pQueuePtr p;</span><br><span class="line">	p = Q.front-&gt;next;</span><br><span class="line">	e = p-&gt;data;</span><br><span class="line">	Q.front-&gt;next = p-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueEmpty</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear) <span class="keyword">return</span> ok;</span><br><span class="line">	<span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GEtaHead</span><span class="params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (QueueEmpty(Q)) <span class="keyword">return</span> ERROR;</span><br><span class="line">	e = Q.front-&gt;next-&gt;data;</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLenth</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	pQueuePtr p;</span><br><span class="line">	p = Q.front;</span><br><span class="line">	<span class="keyword">if</span> (p-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		++i;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueTraverse</span><span class="params">(LinkQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pQueuePtr p;</span><br><span class="line">	p = Q.front-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;data);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>wo de di yi pian wen zhan</title>
    <url>/2020/09/17/wo-de-di-yi-pian-wen-zhan/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
