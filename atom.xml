<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>α·匣子</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-09-21T06:13:53.842Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>CmDragon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>查询与排序</title>
    <link href="http://example.com/2020/09/21/%E6%9F%A5%E8%AF%A2%E4%B8%8E%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2020/09/21/%E6%9F%A5%E8%AF%A2%E4%B8%8E%E6%8E%92%E5%BA%8F/</id>
    <published>2020-09-21T06:09:40.802Z</published>
    <updated>2020-09-21T06:13:53.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序与查找"><a href="#排序与查找" class="headerlink" title="排序与查找"></a>排序与查找</h2><h3 id="一、查找"><a href="#一、查找" class="headerlink" title="一、查找"></a>一、查找</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="二分法非递归"><a href="#二分法非递归" class="headerlink" title="二分法非递归"></a>二分法非递归</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"> </span><br><span class="line"><span class="function">Status <span class="title">BinatySearch</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> x)</span><span class="comment">//数组从 1 开始 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p,k,r;</span><br><span class="line">p=<span class="number">1</span>;</span><br><span class="line">r=n;</span><br><span class="line"><span class="keyword">while</span>(p&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">k=(p+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a[k]==x) <span class="keyword">return</span> k;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[k]&lt;x) p=k+<span class="number">1</span>;<span class="comment">//[k+1~r]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> r=k<span class="number">-1</span>;<span class="comment">//[p~k-1]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int a[10]=&#123;0,12,9,3,7,14,11&#125;;</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">14</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> p=BinatySearch(a,<span class="number">6</span>,<span class="number">14</span>);</span><br><span class="line"><span class="keyword">if</span>(p)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[%d]=%d&quot;</span>,p,a[p]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="二分法递归"><a href="#二分法递归" class="headerlink" title="二分法递归"></a>二分法递归</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">RBinatySearch</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> p,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p&gt;r) &#123;<span class="keyword">return</span> ERROR;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> k=k=(p+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a[k]==x) <span class="keyword">return</span> k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[k]&lt;x) <span class="keyword">return</span> RBinatySearch(a,k+<span class="number">1</span>,r,x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> RBinatySearch(a,p,k<span class="number">-1</span>,x);</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int a[10]=&#123;0,12,9,3,7,14,11&#125;;</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">14</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> p=RBinatySearch(a,<span class="number">1</span>,<span class="number">6</span>,<span class="number">11</span>);</span><br><span class="line"><span class="keyword">if</span>(p)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[%d]=%d&quot;</span>,p,a[p]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><h3 id="二、排序"><a href="#二、排序" class="headerlink" title="二、排序"></a>二、排序</h3><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h4 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1.选择排序"></a>1.选择排序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">seekMinType</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">seekMinType</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> smallest=i;</span><br><span class="line"> <span class="keyword">for</span>(;i&lt;=n;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(a[i]&lt;a[smallest])</span><br><span class="line"> smallest=i;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> smallest;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">SSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> smallest;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> smallest=seekMinType(a,i,n);</span><br><span class="line"> <span class="keyword">int</span> k=a[i];</span><br><span class="line"> a[i]=a[smallest];</span><br><span class="line"> a[smallest]=k;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">11</span>&#125;;</span><br><span class="line">SSort(a,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><h4 id="2-插入排序"><a href="#2-插入排序" class="headerlink" title="2.插入排序"></a>2.插入排序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">key=a[i];</span><br><span class="line">j=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;a[j]&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">--j;</span><br><span class="line">&#125;</span><br><span class="line">a[j+<span class="number">1</span>]=key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">11</span>&#125;;</span><br><span class="line">InsertSort(a,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-归并排序"><a href="#3-归并排序" class="headerlink" title="3.归并排序"></a>3.归并排序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">20</span>];</span><br><span class="line"><span class="comment">//int iod = 1;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merce</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> k, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p &gt;= r) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> k = (p + r) ;</span><br><span class="line">MSort(a, p, k);<span class="comment">//左边 </span></span><br><span class="line">MSort(a, k + <span class="number">1</span>, r);<span class="comment">//右边 </span></span><br><span class="line">Merce(a, p, k, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merce</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> k, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, iod;</span><br><span class="line">i = p, j = k + <span class="number">1</span>;<span class="comment">//两个数组的起始坐标</span></span><br><span class="line">iod = <span class="number">1</span>;<span class="comment">//队 数组s 的下标 每次使用前进行初始化 当尾指针使用</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= k &amp;&amp; j &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt;= a[j])</span><br><span class="line">&#123;</span><br><span class="line">s[iod] = a[j];</span><br><span class="line">++iod;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">s[iod] = a[i];</span><br><span class="line">++iod;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line"><span class="keyword">if</span> (i &lt;= k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (; i &lt;= k; i++)</span><br><span class="line">&#123;</span><br><span class="line">s[iod] = a[i];</span><br><span class="line">++iod;</span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"><span class="keyword">if</span> (j &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (; j &lt;= r; j++)</span><br><span class="line">&#123;</span><br><span class="line">s[iod] = a[j];</span><br><span class="line">++iod;</span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"><span class="keyword">int</span> ip=p;</span><br><span class="line">iod = <span class="number">1</span>;<span class="comment">//初始化一下当 队 结构头指针使用</span></span><br><span class="line"><span class="keyword">for</span> (; p &lt;= r; p++)</span><br><span class="line">&#123;</span><br><span class="line">a[p] = s[iod];</span><br><span class="line">++iod;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//测试代码；</span></span><br><span class="line"><span class="keyword">for</span> (; ip &lt;= r; ip++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[ip]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>] = &#123; <span class="number">0</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">5</span> &#125;;</span><br><span class="line">MSort(a, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n主函数中排序结果输出:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i]);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="G:\blog\source\images\归并排序.png" alt="归并排序"></p><h4 id="-4"><a href="#-4" class="headerlink" title=""></a></h4><h4 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4.快速排序"></a>4.快速排序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">20</span>];</span><br><span class="line"><span class="comment">//int iod = 1;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Quicksort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Quicksort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p &gt;= r) </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> k = Partition(a, p, r);</span><br><span class="line">Quicksort(a, p, k - <span class="number">1</span>);</span><br><span class="line">Quicksort(a, k + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, couse;</span><br><span class="line">k = p;<span class="comment">//返回重新排序后，比较元素的下标</span></span><br><span class="line">couse = a[k];</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">i = p, j = r;</span><br><span class="line"><span class="keyword">while</span> (p &lt; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (a[r] &gt; couse)</span><br><span class="line">--r;</span><br><span class="line"><span class="keyword">if</span> (r &gt; p)</span><br><span class="line">&#123;</span><br><span class="line">a[p] = a[r];</span><br><span class="line">++p;</span><br><span class="line">k = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (a[p] &lt; couse)</span><br><span class="line">++p;</span><br><span class="line"><span class="keyword">if</span> (r &gt; p)</span><br><span class="line">&#123;</span><br><span class="line">a[r] = a[p];</span><br><span class="line">--r; </span><br><span class="line">k = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[k] = couse;</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>] = &#123; <span class="number">0</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">5</span> &#125;;</span><br><span class="line">Quicksort(a, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i]);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="G:\blog\source\images\快速排序.png" alt="快速排序"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;排序与查找&quot;&gt;&lt;a href=&quot;#排序与查找&quot; class=&quot;headerlink&quot; title=&quot;排序与查找&quot;&gt;&lt;/a&gt;排序与查找&lt;/h2&gt;&lt;h3 id=&quot;一、查找&quot;&gt;&lt;a href=&quot;#一、查找&quot; class=&quot;headerlink&quot; title=&quot;一、查找&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构第三章-栈与队列(stack or queue)的代码实现</title>
    <link href="http://example.com/2020/09/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-stack-or-queue-%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2020/09/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-stack-or-queue-%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-09-18T05:20:22.000Z</published>
    <updated>2020-09-18T05:21:11.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构第三章-栈与队列-stack-or-queue-的代码实现"><a href="#数据结构第三章-栈与队列-stack-or-queue-的代码实现" class="headerlink" title="数据结构第三章-栈与队列(stack or queue)的代码实现"></a>数据结构第三章-栈与队列(stack or queue)的代码实现</h2><ul><li><p>运行环境：VS2017</p></li><li><p>调试情况：书中给出的数据均可实现</p></li></ul><h3 id="一、栈的实现与基本操作"><a href="#一、栈的实现与基本操作" class="headerlink" title="一、栈的实现与基本操作"></a>一、栈的实现与基本操作</h3><h4 id="1、栈的链式存储结构"><a href="#1、栈的链式存储结构" class="headerlink" title="1、栈的链式存储结构"></a>1、栈的链式存储结构</h4><p>​        栈的链式存储结构用双向链表加一个头指针、一个尾指针即可实现。用链式存储结构写栈的基本操作很简单即不在这附上具体代码，放一个结构体即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">&#125;SElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> * <span class="title">prior</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;STNode,*pSNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    pSNode base;<span class="comment">//指向头结点</span></span><br><span class="line">    pSNode top;<span class="comment">//指向为结点</span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><p>​        </p><h4 id="2、栈的顺序存储结构——基本操作"><a href="#2、栈的顺序存储结构——基本操作" class="headerlink" title="2、栈的顺序存储结构——基本操作"></a>2、栈的顺序存储结构——基本操作</h4><p>​        严奶奶的书中具体介绍的是顺序存储结构为主，在这具体实现的代码便是栈的顺序存储结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stack.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> true 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> STACK_INIT_SIZE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> STACKINCREMENT = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line">&#125;SElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line">SElemType *base;</span><br><span class="line">SElemType *top;</span><br><span class="line"><span class="keyword">int</span> stacksize;</span><br><span class="line"></span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈基本操作</span></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>;<span class="comment">//构建栈</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyStack</span><span class="params">(SqStack &amp;S)</span></span>;<span class="comment">//销毁栈</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ClearStack</span><span class="params">(SqStack &amp;S)</span></span>;<span class="comment">//若栈存在，将栈清空</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>;<span class="comment">//判断栈是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>    <span class="title">StackLength</span><span class="params">(SqStack S)</span></span>;<span class="comment">//返回栈的长度</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GetTop</span><span class="params">(SqStack S, SElemType &amp;e)</span></span>; <span class="comment">//查看栈顶元素</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack &amp;S, SElemType e)</span></span>;<span class="comment">//进栈</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;S, SElemType &amp;e)</span></span>;<span class="comment">//出栈</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">StackTraverse</span><span class="params">(SqStack S)</span></span>;<span class="comment">//遍历栈</span></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span><span class="comment">//构建栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">S.base = (SElemType *)<span class="built_in">malloc</span>(STACK_INIT_SIZE *<span class="keyword">sizeof</span>(SElemType));</span><br><span class="line"><span class="keyword">if</span> (!S.base) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">S.top = S.base;</span><br><span class="line">S.stacksize = STACK_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack S)</span><span class="comment">//判断栈是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> ok;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">DestroyStack</span><span class="params">(SqStack &amp;S)</span><span class="comment">//销毁栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">free</span>(S.base);</span><br><span class="line">S.base = <span class="literal">NULL</span>;</span><br><span class="line">S.stacksize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ClearStack</span><span class="params">(SqStack &amp;S)</span><span class="comment">//若栈存在，将栈清空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StackEmpty(S)) <span class="keyword">return</span> ok;</span><br><span class="line"><span class="keyword">while</span> (!StackEmpty(S))</span><br><span class="line">--S.top;</span><br><span class="line"><span class="comment">//S.stacksize = 0;</span></span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>    <span class="title">StackLength</span><span class="params">(SqStack S)</span><span class="comment">//返回栈的长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">i = S.top - S.base;</span><br><span class="line"><span class="comment">/*while (p != S.top)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">++p;</span></span><br><span class="line"><span class="comment">++i;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">GetTop</span><span class="params">(SqStack S, SElemType &amp;e)</span> <span class="comment">//查看栈顶元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StackEmpty(S)) <span class="keyword">return</span> ERROR;</span><br><span class="line">SElemType *p;</span><br><span class="line">p = S.top;</span><br><span class="line">--p;</span><br><span class="line">e = *p;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack &amp;S, SElemType e)</span> <span class="comment">//进栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base &gt;= S.stacksize)</span><br><span class="line">&#123;</span><br><span class="line">S.base = (SElemType *)<span class="built_in">realloc</span>(S.base,(S.stacksize+ STACKINCREMENT)*<span class="keyword">sizeof</span>(SElemType));</span><br><span class="line"><span class="keyword">if</span> (!S.base) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">S.top = S.base+S.stacksize;</span><br><span class="line">S.stacksize = S.stacksize + STACKINCREMENT;</span><br><span class="line">&#125;</span><br><span class="line">*S.top = e;</span><br><span class="line">++S.top;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;S, SElemType &amp;e)</span> <span class="comment">//出栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StackEmpty(S)) <span class="keyword">return</span> ERROR;</span><br><span class="line">--S.top;</span><br><span class="line">e = *S.top;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">StackTraverse</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SElemType *p = S.base;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == S.base)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">while</span> (p &lt; S.top)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;data);</span><br><span class="line">++p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、栈的应用举例"><a href="#3、栈的应用举例" class="headerlink" title="3、栈的应用举例"></a>3、栈的应用举例</h4><p>​        严奶奶书中栈的应用有五个小实例，在这一一放出具体的实现代码。</p><p><img src="C:\Users\19341\Desktop\stack.png"></p><p>​        </p><h5 id="3-1、数值转换"><a href="#3-1、数值转换" class="headerlink" title="3.1、数值转换"></a>3.1、数值转换</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SElemType结构体数据发生改变</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">&#125;SElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除基本函数外还需导入一下函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">conversion</span><span class="params">(SElemType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试的为二进制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">conversion</span><span class="params">(SElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SqStack S;</span><br><span class="line">InitStack(S);</span><br><span class="line"><span class="keyword">int</span> N = e.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (N)</span><br><span class="line">&#123;</span><br><span class="line">e.data = N%<span class="number">2</span>;</span><br><span class="line">Push(S, e);</span><br><span class="line">N = N / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!StackEmpty(S))</span><br><span class="line">&#123;</span><br><span class="line">Pop(S, e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, e.data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2、括号匹配监验"><a href="#3-2、括号匹配监验" class="headerlink" title="3.2、括号匹配监验"></a>3.2、括号匹配监验</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line">&#125;SElemType;</span><br><span class="line"><span class="comment">//括号匹配监测</span></span><br><span class="line"><span class="comment">//()、[]</span></span><br><span class="line"><span class="function">Status <span class="title">matching</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">matching</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">SqStack S;</span><br><span class="line">InitStack(S);</span><br><span class="line">SElemType e;</span><br><span class="line">SElemType ea;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= n)<span class="comment">//n 为数组长度  i为数组下标</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (a[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>: </span><br><span class="line">e.data = a[i];</span><br><span class="line">Push(S, e);</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">e.data = a[i];</span><br><span class="line">Push(S, e);</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line"> GetTop(S, ea);</span><br><span class="line"><span class="keyword">if</span> (ea.data == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">Pop(S,ea);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> i++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line"> GetTop(S, ea);</span><br><span class="line"><span class="keyword">if</span> (ea.data == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">Pop(S, ea);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> i++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StackEmpty(S)) <span class="keyword">return</span> ok;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3、行编辑程序"><a href="#3-3、行编辑程序" class="headerlink" title="3.3、行编辑程序"></a>3.3、行编辑程序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//行编辑</span></span><br><span class="line"><span class="comment">//# 为退格符、@ 为退行符</span></span><br><span class="line"><span class="function">Status <span class="title">LineEdit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Status <span class="title">LineEdit</span><span class="params">()</span><span class="comment">//不知道 EOF 的退出条件是什么</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SqStack S;</span><br><span class="line">SElemType e;</span><br><span class="line">InitStack(S);</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (ch != <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (ch != <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(ch)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:Pop(S, e); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;@&#x27;</span>:ClearStack(S); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">e.data = ch;</span><br><span class="line">Push(S, e);</span><br><span class="line">&#125;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line">StackTraverse(S);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">ClearStack(S);</span><br><span class="line"><span class="keyword">if</span>(ch!= <span class="string">&#x27;0&#x27;</span>) ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DestroyStack(S);</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><h5 id="3-4、迷宫求解"><a href="#3-4、迷宫求解" class="headerlink" title="3.4、迷宫求解"></a>3.4、迷宫求解</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">&#125;PosType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> ord;<span class="comment">//序号</span></span><br><span class="line">PosType seat;<span class="comment">//坐标位置</span></span><br><span class="line"><span class="keyword">int</span> di;<span class="comment">//方向</span></span><br><span class="line">&#125;SElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment">迷宫求解-需要的所有函数.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0:路，可通过</span></span><br><span class="line"><span class="comment">1:墙，不可通过;且同时作为不能通过的标记</span></span><br><span class="line"><span class="comment">2:沿途的标记</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Status <span class="title">Pass</span><span class="params">(PosType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FootPrint</span><span class="params">(PosType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">PosType <span class="title">NextPos</span><span class="params">(PosType e, <span class="keyword">int</span> N)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MarkPrint</span><span class="params">(PosType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">MazePath</span><span class="params">(PosType start, PosType end)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Pass</span><span class="params">(PosType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = carry[e.i][e.j];</span><br><span class="line"><span class="keyword">if</span> (!N) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FootPrint</span><span class="params">(PosType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">carry[e.i][e.j] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PosType <span class="title">NextPos</span><span class="params">(PosType e, <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (N)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">e.j = e.j + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">e.i = e.i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">e.j = e.j - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">e.i = e.i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MarkPrint</span><span class="params">(PosType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">carry[e.i][e.j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">MazePath</span><span class="params">(PosType start, PosType end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SqStack S;</span><br><span class="line">InitStack(S);</span><br><span class="line">SElemType e;</span><br><span class="line">PosType curpos;</span><br><span class="line">curpos = start;<span class="comment">//设置“当前位置”为“入口位置”</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> curstep = <span class="number">1</span>;<span class="comment">//步数</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (Pass(curpos)) &#123;</span><br><span class="line">FootPrint(curpos);<span class="comment">//标记</span></span><br><span class="line">e.ord = curstep;</span><br><span class="line">e.seat = curpos;</span><br><span class="line">e.di = <span class="number">1</span>;</span><br><span class="line">Push(S, e);</span><br><span class="line"><span class="keyword">if</span> ((curpos.i == end.i) &amp;&amp; (curpos.j == end.j)) &#123; StackTraverse(S); <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">curpos = NextPos(curpos, <span class="number">1</span>);</span><br><span class="line">curstep++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!StackEmpty(S))</span><br><span class="line">&#123;</span><br><span class="line">Pop(S,e);</span><br><span class="line"><span class="keyword">while</span> (e.di == <span class="number">4</span> &amp;&amp; !StackEmpty(S))</span><br><span class="line">&#123;</span><br><span class="line">MarkPrint(e.seat);</span><br><span class="line">Pop(S, e);</span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line"><span class="keyword">if</span> (e.di &lt; <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">e.di++;</span><br><span class="line">Push(S, e);</span><br><span class="line">curpos = NextPos(e.seat, e.di);</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//else</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (!StackEmpty(S));</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-5、表达式求值"><a href="#3-5、表达式求值" class="headerlink" title="3.5、表达式求值"></a>3.5、表达式求值</h5><p>​        严奶奶书中的原程序，输入的是一段字符串，加减一直ASCii值相加减，我想不出来，加减的操作数应该是整形，操作符号应该是字符型，肯定不能放在相同类型的栈里面。</p><p>​        自己想出来的方法是在定义一个int类型数组(这个数组模拟栈的先进后出模式)将操作数放在整形数组里面，将操作符放在原先定义的栈里面。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line">&#125;SElemType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式求值</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> OPerandType;</span><br><span class="line"></span><br><span class="line">OPerandType OPND[<span class="number">50</span>];</span><br><span class="line">OPerandType iod=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="function">Status <span class="title">In</span><span class="params">(<span class="keyword">char</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Precede</span><span class="params">(SElemType e, <span class="keyword">char</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">OPerandType <span class="title">Operate</span><span class="params">(OPerandType a, <span class="keyword">char</span> theta, OPerandType b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">OPerandType <span class="title">EvaluateExpression</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Num</span><span class="params">(<span class="keyword">char</span> *b, <span class="keyword">int</span> i)</span></span>;<span class="comment">//数值转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//具体代码实现</span></span><br><span class="line"><span class="function">Status <span class="title">In</span><span class="params">(<span class="keyword">char</span> c)</span>  <span class="comment">//判断是否是数字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Precede</span><span class="params">(SElemType e, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> xita[] = &#123; <span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;#&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> sita[<span class="number">7</span>][<span class="number">7</span>] =</span><br><span class="line">&#123;</span><br><span class="line">&#123; <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;0&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;=&#x27;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;<span class="number">7</span>;p++)</span><br><span class="line"><span class="keyword">if</span> (xita[p] == e.data)</span><br><span class="line">&#123;</span><br><span class="line">i = p;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">7</span>; p++)</span><br><span class="line"><span class="keyword">if</span> (xita[p] == c)</span><br><span class="line">&#123;</span><br><span class="line">j = p;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sita[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">OPerandType <span class="title">Operate</span><span class="params">(OPerandType a, <span class="keyword">char</span> theta, OPerandType b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OPerandType sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (theta)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:sum = a + b; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:sum = a - b; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:sum = a * b; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:sum = a / b; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Num</span><span class="params">(<span class="keyword">char</span> *b, <span class="keyword">int</span> i)</span><span class="comment">//数值转换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">1</span>; p &lt; i; p++)</span><br><span class="line">s = s * <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; i; p++)</span><br><span class="line">&#123;</span><br><span class="line">sum = (b[p] - <span class="string">&#x27;0&#x27;</span>) * s + sum;</span><br><span class="line">s = s / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">OPerandType <span class="title">EvaluateExpression</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> charNum[<span class="number">100</span>]; </span><br><span class="line"><span class="keyword">int</span> ic = <span class="number">0</span>;</span><br><span class="line">SqStack OPTR; </span><br><span class="line">InitStack(OPTR);</span><br><span class="line">SElemType e, d, x, e1, theta;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">e.data = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">Push(OPTR, e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">char</span> c = getchar();</span><br><span class="line">GetTop(OPTR, e1);</span><br><span class="line"><span class="keyword">while</span> (c != <span class="string">&#x27;#&#x27;</span> ||  e1.data!= <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!In(c))</span><br><span class="line">&#123;</span><br><span class="line">charNum[ic] = c;</span><br><span class="line">++ic;</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ic != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">OPND[iod] = Num(charNum, ic);</span><br><span class="line">++iod;</span><br><span class="line">ic = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">GetTop(OPTR, e1);</span><br><span class="line"><span class="keyword">switch</span> (Precede(e1, c))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">e.data = c;</span><br><span class="line">Push(OPTR, e);</span><br><span class="line">c = getchar();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">Pop(OPTR, x);</span><br><span class="line">c = getchar(); </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">Pop(OPTR, theta);</span><br><span class="line">b = OPND[--iod];</span><br><span class="line">a = OPND[--iod];</span><br><span class="line">OPND[iod] = Operate(a, theta.data, b);</span><br><span class="line">++iod;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="comment">//switch</span></span><br><span class="line">GetTop(OPTR, e1);</span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OPND[--iod];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>严奶奶的书中的代码除看不理解，再看就闷逼、反复思考把里面的具体操作弄懂之后。在看书中的伪代码，才发现，代码虽然在机器上具体实现了，但是具体功能的核心代码却不是自己想出来的，初实现的时候还很开心，开心过后就会发现有些失落，感觉自己写出了很多的没用的代码，书中的代码就很简洁、直观，足以。</p><p>写出来也只是给自己的一份锻炼吧。</p><h3 id="二、队的实现与基本操作"><a href="#二、队的实现与基本操作" class="headerlink" title="二、队的实现与基本操作"></a>二、队的实现与基本操作</h3><h4 id="1、队的链式存储结构"><a href="#1、队的链式存储结构" class="headerlink" title="1、队的链式存储结构"></a>1、队的链式存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> true 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0;</span></span><br><span class="line"><span class="comment">//#define MAXSIZE 100;</span></span><br><span class="line"><span class="keyword">int</span> MAXSIZE = <span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line">&#125;QueueElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">QueueElemType *base;</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(SqQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueEmpty</span><span class="params">(SqQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLenth</span><span class="params">(SqQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GEtaHead</span><span class="params">(SqQueue &amp;Q, QueueElemType &amp;e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q, QueueElemType e)</span></span>;<span class="comment">//插入元素-&gt;进队</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q, QueueElemType &amp;e)</span></span>;<span class="comment">//删除元素-&gt;出队</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueTraverse</span><span class="params">(SqQueue Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Q.base = (QueueElemType  *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QueueElemType)*MAXSIZE);</span><br><span class="line"><span class="keyword">if</span> (!Q.base) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">Q.front = <span class="number">0</span>;</span><br><span class="line">Q.rear = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLenth</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Q.rear - Q.front + MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q, QueueElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MAXSIZE == Q.front) <span class="keyword">return</span> ERROR;</span><br><span class="line">Q.base[Q.rear] = e;</span><br><span class="line">Q.rear = (Q.rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q, QueueElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear) <span class="keyword">return</span> ERROR;</span><br><span class="line">e = Q.base[Q.front];</span><br><span class="line">Q.front = (Q.front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Q.base)</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line"><span class="built_in">free</span>(Q.base);</span><br><span class="line">Q.base = <span class="literal">NULL</span>;</span><br><span class="line">Q.front = <span class="number">0</span>;</span><br><span class="line">Q.rear = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueEmpty</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear) <span class="keyword">return</span> ok;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GEtaHead</span><span class="params">(SqQueue &amp;Q, QueueElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (QueueEmpty(Q)) <span class="keyword">return</span> ERROR;</span><br><span class="line">e = Q.base[Q.front];</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueTraverse</span><span class="params">(SqQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = Q.front;</span><br><span class="line"><span class="keyword">while</span> (i != Q.rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Q.base[i]);</span><br><span class="line">i = (i + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、队的顺序存储——循环队列"><a href="#2、队的顺序存储——循环队列" class="headerlink" title="2、队的顺序存储——循环队列"></a>2、队的顺序存储——循环队列</h4><ul><li><p>求队长的公式：(Q.rear-Q.front+MAXSIZE)%MAXSIZE</p></li><li><p>队尾插入数据队满条件：(Q.rear+1)%MAXSIZE==Q.front</p></li><li><p>对头对尾下标加一：Q.front=(Q.front+1)%MAXSIZE</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line">&#125;QElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> &#123;</span></span><br><span class="line">QElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;QNode,*pQueuePtr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line">pQueuePtr front;<span class="comment">//队头指针</span></span><br><span class="line"></span><br><span class="line">pQueuePtr rear;<span class="comment">//队尾指针</span></span><br><span class="line"></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueEmpty</span><span class="params">(LinkQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLenth</span><span class="params">(LinkQueue &amp;Q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GEtaHead</span><span class="params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, QElemType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueTraverse</span><span class="params">(LinkQueue Q)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Q.front = Q.rear = (pQueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"><span class="keyword">if</span> (!Q.front) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyQueue</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (Q.front)</span><br><span class="line">&#123;</span><br><span class="line">Q.rear = Q.front-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(Q.front);</span><br><span class="line">Q.front = Q.rear;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, QElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pQueuePtr p;</span><br><span class="line">p = (pQueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">Q.rear-&gt;next = p;</span><br><span class="line">Q.rear = p;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear) <span class="keyword">return</span> ERROR;</span><br><span class="line">pQueuePtr p;</span><br><span class="line">p = Q.front-&gt;next;</span><br><span class="line">e = p-&gt;data;</span><br><span class="line">Q.front-&gt;next = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueEmpty</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear) <span class="keyword">return</span> ok;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GEtaHead</span><span class="params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (QueueEmpty(Q)) <span class="keyword">return</span> ERROR;</span><br><span class="line">e = Q.front-&gt;next-&gt;data;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLenth</span><span class="params">(LinkQueue &amp;Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">pQueuePtr p;</span><br><span class="line">p = Q.front;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">++i;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">QueueTraverse</span><span class="params">(LinkQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pQueuePtr p;</span><br><span class="line">p = Q.front-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据结构第三章-栈与队列-stack-or-queue-的代码实现&quot;&gt;&lt;a href=&quot;#数据结构第三章-栈与队列-stack-or-queue-的代码实现&quot; class=&quot;headerlink&quot; title=&quot;数据结构第三章-栈与队列(stack or queu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构第二单元课本代码实现</title>
    <link href="http://example.com/2020/09/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E5%8D%95%E5%85%83%E8%AF%BE%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2020/09/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E5%8D%95%E5%85%83%E8%AF%BE%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-09-18T05:17:36.894Z</published>
    <updated>2020-09-18T05:18:59.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-1单链表"><a href="#2-1单链表" class="headerlink" title="2.1单链表"></a>2.1单链表</h3><p><strong>前言：</strong>学习严蔚敏教授的课程很痛苦，但做为一门数据结构这门课程，也没人能与严奶奶堪比了。所以我想把严奶奶课程里面涉及的知识点一一实现出来，保存在这里。有机会有人能看到也能帮助各位同学学习，少掉点头发。</p><p><strong>eg：</strong>如果发现为什么有些函数的实现为什么跟严奶奶讲解的有些不一样，别问，问就是我的实力不够，无法实现视频里那样简洁、美观的代码。</p><h4 id="2-1-1-list-h"><a href="#2-1-1-list-h" class="headerlink" title="2.1.1 list.h"></a>2.1.1 list.h</h4><p>函数的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//list.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> no 0;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Lnode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Lnode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Lnode, *pnode;</span><br><span class="line"></span><br><span class="line"><span class="function">pnode <span class="title">InitList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">createList</span><span class="params">(pnode &amp;h,ElemType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InsertList</span><span class="params">(pnode &amp;h, ElemType i, ElemType e)</span></span>;<span class="comment">//在t 数据后插入</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeleteList</span><span class="params">(pnode &amp;h, ElemType e)</span></span>;<span class="comment">//输出e结点</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">changeList</span><span class="params">(pnode &amp;h, ElemType e)</span></span>;<span class="comment">//修改结点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(pnode &amp;h)</span></span>;</span><br><span class="line"><span class="function">pnode <span class="title">InitList</span><span class="params">()</span><span class="comment">//头结点为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pnode h;</span><br><span class="line">h = (pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">createList</span><span class="params">(pnode &amp;h,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pnode p, q;</span><br><span class="line">p = h;</span><br><span class="line">q = (pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">q-&gt;data = e;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">InsertList</span><span class="params">(pnode &amp;h, ElemType i, ElemType e)</span><span class="comment">//插入不考虑尾结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">pnode p, q;</span><br><span class="line">p=h-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p&amp;&amp;i &lt; <span class="number">0</span>) <span class="keyword">return</span> no;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p&amp;&amp;j &lt; i)</span><br><span class="line">h = h-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;next) <span class="keyword">return</span> no;</span><br><span class="line"></span><br><span class="line">q = (pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line"></span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DeleteList</span><span class="params">(pnode &amp;h, ElemType e)</span><span class="comment">//假设链表不为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pnode p, q;</span><br><span class="line">p = h-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == e)<span class="comment">//删除第一个结点</span></span><br><span class="line">&#123;</span><br><span class="line">h-&gt;next = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (q)<span class="comment">//删除中间结点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;data == e)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">p = q;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!q) <span class="keyword">return</span> no;<span class="comment">//查找到最后也没找到结点</span></span><br><span class="line"><span class="keyword">if</span> (!q-&gt;next) &#123; p-&gt;next = <span class="literal">NULL</span>; <span class="built_in">free</span>(q); <span class="keyword">return</span> ok; &#125;<span class="comment">//最后一个结点为目标结点</span></span><br><span class="line"></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">changeList</span><span class="params">(pnode &amp;h, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pnode p=h-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data != e)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span> no;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(pnode &amp;h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pnode p=h-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-list-cpp"><a href="#2-1-2-list-cpp" class="headerlink" title="2.1.2 list.cpp"></a>2.1.2 list.cpp</h4><p>测试数据：12,23,34,45,56 </p><p>这里面只测试了</p><ul><li><p>InitList()</p></li><li><p>createList(p, a)</p></li><li><p>printList(p)</p><p>这三个函数。但是实现难度不大，其余函数有bug应该也很容易修改。        </p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;list.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pnode p=InitList();</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">createList(p, a);</span><br><span class="line">&#125;</span><br><span class="line">printList(p);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2表头链表基本操作函数实现"><a href="#2-2表头链表基本操作函数实现" class="headerlink" title="2.2表头链表基本操作函数实现"></a>2.2表头链表基本操作函数实现</h3><h4 id="2-2-1-LinkList-h"><a href="#2-2-1-LinkList-h" class="headerlink" title="2.2.1 LinkList.h"></a>2.2.1 LinkList.h</h4><h5 id="2-2-1-1-表头链表结构体以及自定义变量"><a href="#2-2-1-1-表头链表结构体以及自定义变量" class="headerlink" title="2.2.1.1 表头链表结构体以及自定义变量"></a>2.2.1.1 表头链表结构体以及自定义变量</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">ElemType e;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;*pLink,*position;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">pLink head;<span class="comment">//指向头结点</span></span><br><span class="line">pLink tail;<span class="comment">//指向尾结点</span></span><br><span class="line">pLink current;<span class="comment">//游标指针(当前指针)</span></span><br><span class="line"><span class="keyword">int</span> len;<span class="comment">//当前结点个数</span></span><br><span class="line">&#125;LinkList;</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="2-2-1-2-表头链表函数定义"><a href="#2-2-1-2-表头链表函数定义" class="headerlink" title="2.2.1.2 表头链表函数定义"></a>2.2.1.2 表头链表函数定义</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="function">pLink <span class="title">InitListHead</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">createListNode</span><span class="params">(pLink &amp;h, ElemType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(pLink &amp;h)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListEmply</span><span class="params">(LinkList L)</span></span>;<span class="comment">//判断表空</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLenght</span><span class="params">(LinkList L)</span></span>;<span class="comment">//返回表长</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Prior</span><span class="params">(LinkList &amp;L)</span></span>;<span class="comment">//指向其前驱</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Next</span><span class="params">(LinkList &amp;L)</span></span>;<span class="comment">//改变当前指针指向其后继</span></span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">GetCurElem</span><span class="params">(LinkList L)</span></span>;<span class="comment">//返回当前指针的指向的结点的值</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>;<span class="comment">//创建链表</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">CreateList</span><span class="params">(LinkList &amp;L, ElemType e)</span></span>; <span class="comment">//表尾添加结点</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyList</span><span class="params">(LinkList &amp;L)</span></span>;<span class="comment">//销毁结点</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">LocateElem</span><span class="params">(LinkList &amp;L, ElemType e)</span></span>;<span class="comment">//改变当前指针指向第i个结点</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListTraverse</span><span class="params">(LinkList L)</span></span>;<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Status ClearList(LinkList L);//重置链表 -&gt;Status DestroyList(LinkList &amp;L)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Status SetCurElem(LinkList &amp;L, ElemType e);//更新当前指针所指向的元素 -&gt; Status LocateElem(LinkList L, ElemType e);</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Append</span><span class="params">(LinkList &amp;L, pLink &amp;s)</span></span>;<span class="comment">//给当前链表链接一个链表</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InsAfter</span><span class="params">(LinkList &amp;L, ElemType e)</span></span>;<span class="comment">//将e插入在当前指针所指数据元素之后</span></span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">DelLeftNode</span><span class="params">(LinkList &amp;L)</span></span>;<span class="comment">//删除当前指针的后继结点</span></span><br></pre></td></tr></table></figure><p>​        2.2.1.3 函数实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span><span class="comment">//不考虑内存分配失败的情况</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L.head = (pLink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">L.tail = (pLink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">L.current = (pLink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">L.head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">L.head-&gt;e = <span class="number">-100</span>;</span><br><span class="line">L.len = <span class="number">0</span>;</span><br><span class="line">L.tail = L.current = L.head;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">CreateList</span><span class="params">(LinkList &amp;L, ElemType e)</span><span class="comment">//不移动游标指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L.head) <span class="keyword">return</span> ERROR;</span><br><span class="line">pLink p;</span><br><span class="line">p= (pLink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">p-&gt;e = e;</span><br><span class="line">L.tail-&gt;next = p;</span><br><span class="line">L.tail = p;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">L.len++;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListEmply</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L.head == L.tail) <span class="keyword">return</span> ok;<span class="comment">//空位真 ，非空位假</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLenght</span><span class="params">(LinkList L)</span>   </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Prior</span><span class="params">(LinkList &amp;L)</span><span class="comment">//指向其前驱</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pLink p;</span><br><span class="line"><span class="keyword">if</span> (L.head == L.current) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L.head;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != L.current)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">L.current = p;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Next</span><span class="params">(LinkList &amp;L)</span><span class="comment">//改变当前指针指向其后继</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L.current-&gt;next) <span class="keyword">return</span> ERROR;</span><br><span class="line">L.current = L.current-&gt;next;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">GetCurElem</span><span class="params">(LinkList L)</span><span class="comment">//返回当前指针的指向的结点的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.current-&gt;e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyList</span><span class="params">(LinkList &amp;L)</span><span class="comment">//销毁结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ListEmply(L)) <span class="keyword">return</span> ok;</span><br><span class="line"></span><br><span class="line">pLink p;</span><br><span class="line">L.current = L.head-&gt;next;</span><br><span class="line">p = L.current-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != L.tail)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(L.current);</span><br><span class="line">--L.len;</span><br><span class="line">L.head-&gt;next = p;</span><br><span class="line">L.current = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">L.tail = L.head;</span><br><span class="line">L.current = L.head;</span><br><span class="line">--L.len;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">LocateElem</span><span class="params">(LinkList &amp;L, ElemType e)</span><span class="comment">//改变当前指针指向第i个结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pLink p;</span><br><span class="line"><span class="keyword">if</span> (ListEmply(L)) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L.head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;e != e)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span> ERROR;</span><br><span class="line">L.current = p;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListTraverse</span><span class="params">(LinkList L)</span><span class="comment">//遍历链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pLink p;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">p = L.head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, p-&gt;e);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++i;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Append</span><span class="params">(LinkList &amp;L, pLink &amp;s)</span><span class="comment">//给当前链表链接一个链表 假设S链表有头结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pLink p;</span><br><span class="line">L.tail-&gt;next = s-&gt;next;</span><br><span class="line">p = s;</span><br><span class="line"><span class="comment">//ListTraverse(L);</span></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">L.len++;</span><br><span class="line">&#125;</span><br><span class="line">L.tail = p;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InsAfter</span><span class="params">(LinkList &amp;L, ElemType e)</span><span class="comment">//将e插入在当前指针所指数据元素之后</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L.head) <span class="keyword">return</span> ERROR;</span><br><span class="line">pLink p;</span><br><span class="line">p = (pLink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">p-&gt;e = e;</span><br><span class="line">p-&gt;next = L.current-&gt;next;</span><br><span class="line">L.current-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">DelLeftNode</span><span class="params">(LinkList &amp;L)</span><span class="comment">//删除当前指针的后继结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (L.current == L.tail) <span class="keyword">return</span> ERROR;</span><br><span class="line"></span><br><span class="line">ElemType e;</span><br><span class="line">pLink p;</span><br><span class="line">p = L.current-&gt;next;</span><br><span class="line">e = p-&gt;e;</span><br><span class="line">L.current-&gt;next = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="function">pLink <span class="title">InitListHead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pLink h;</span><br><span class="line">h = (pLink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">createListNode</span><span class="params">(pLink &amp;h, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pLink p, q;</span><br><span class="line">p = h;</span><br><span class="line">q = (pLink)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">q-&gt;e = e;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(pLink &amp;h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pLink p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, p-&gt;e);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="2-2-2LinkList-cpp"><a href="#2-2-2LinkList-cpp" class="headerlink" title="2.2.2LinkList.cpp"></a>2.2.2LinkList.cpp</h4><h5 id="2-2-2-1-主函数测试代码"><a href="#2-2-2-1-主函数测试代码" class="headerlink" title="2.2.2.1 主函数测试代码"></a>2.2.2.1 主函数测试代码</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;LinkList.h&quot;</span> </span></span><br><span class="line"><span class="comment">//测试 &quot;LinkList.h&quot; 的main</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkList p;</span><br><span class="line">InitList(p);</span><br><span class="line"><span class="comment">//if (ListEmply(p)) //空位真</span></span><br><span class="line"><span class="comment">//printf(&quot;链表为空\n&quot;);</span></span><br><span class="line"><span class="comment">//else  printf(&quot;链表为非空\n&quot;);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">CreateList(p, a[i]);</span><br><span class="line">ListTraverse(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//if (ListEmply(p)) //空位真</span></span><br><span class="line"><span class="comment">//printf(&quot;链表为空\n&quot;);</span></span><br><span class="line"><span class="comment">//else  printf(&quot;链表为非空\n&quot;);</span></span><br><span class="line">LocateElem(p, <span class="number">50</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\np.current=%d\n\n&quot;</span>, p.current-&gt;e);</span><br><span class="line"></span><br><span class="line">Next(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\np.current=%d\n\n&quot;</span>, p.current-&gt;e);</span><br><span class="line">Prior(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\np.current=%d\n\n&quot;</span>, p.current-&gt;e);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nGetCurElem(p)的值=%d\n\n&quot;</span>, GetCurElem(p));</span><br><span class="line"></span><br><span class="line"><span class="comment">//DestroyList(p);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//if (ListEmply(p)) //空位真</span></span><br><span class="line"><span class="comment">//printf(&quot;链表为空\n&quot;);</span></span><br><span class="line"><span class="comment">//else  printf(&quot;链表为非空\n&quot;);</span></span><br><span class="line"></span><br><span class="line">InsAfter(p, <span class="number">69</span>);</span><br><span class="line">ListTraverse(p);</span><br><span class="line"></span><br><span class="line">DelLeftNode(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">ListTraverse(p);</span><br><span class="line"></span><br><span class="line">pLink h;</span><br><span class="line">h=InitListHead();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">createListNode(h, b[i]);</span><br><span class="line">printList(h);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">Append(p, h);</span><br><span class="line">ListTraverse(p);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-表头文件的应用"><a href="#2-3-表头文件的应用" class="headerlink" title="2.3 表头文件的应用"></a>2.3 表头文件的应用</h3><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h4 id="1-使La，Lb递增的两个链表，链接在Lc中也是递增的"><a href="#1-使La，Lb递增的两个链表，链接在Lc中也是递增的" class="headerlink" title="1. 使La，Lb递增的两个链表，链接在Lc中也是递增的"></a>1. 使La，Lb递增的两个链表，链接在Lc中也是递增的</h4><p><strong>主要函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(ElemType a, ElemType b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(ElemType a, ElemType b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a &lt; b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeList</span><span class="params">(LinkList &amp;La, LinkList &amp;Lb, LinkList &amp;Lc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">LinkList pa, pb;</span><br><span class="line">pa = La, pb = Lb;</span><br><span class="line">pa.current = pa.head-&gt;next;</span><br><span class="line">pb.current = pb.head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (pa.current&amp;&amp;pb.current)</span><br><span class="line">&#123;</span><br><span class="line">a = pa.current-&gt;e;</span><br><span class="line">b = pb.current-&gt;e;</span><br><span class="line"><span class="keyword">if</span> (compare(a, b))</span><br><span class="line">&#123;</span><br><span class="line">CreateList(Lc, pa.current-&gt;e);</span><br><span class="line">pa.current = pa.current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CreateList(Lc, pb.current-&gt;e);</span><br><span class="line">pb.current = pb.current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pa.current) &#123; Prior(pa); Append(Lc, pa.current); &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; Prior(pb); Append(Lc, pb.current); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">写299~303行 需要重写Append()函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//DestroyList(La);</span></span><br><span class="line"><span class="comment">//DestroyList(Lb);</span></span><br><span class="line"><span class="comment">//free(La.head);</span></span><br><span class="line"><span class="comment">//free(Lb.head);</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-一元多项式-创建与两个多项式相加"><a href="#2-一元多项式-创建与两个多项式相加" class="headerlink" title="2.  一元多项式 创建与两个多项式相加"></a>2.  一元多项式 创建与两个多项式相加</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> coef;</span><br><span class="line"><span class="keyword">int</span> expn;</span><br><span class="line">&#125;term,ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;node,*pnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">pnode head;<span class="comment">//指向头结点</span></span><br><span class="line">pnode tail;<span class="comment">//指向尾结点</span></span><br><span class="line">pnode current;<span class="comment">//游标指针</span></span><br><span class="line"><span class="keyword">int</span> len;<span class="comment">//当前结点个数</span></span><br><span class="line">&#125;LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> LinkList polynomail;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>;<span class="comment">//创建链表</span></span><br><span class="line"><span class="function">Status <span class="title">CreateList</span><span class="params">(LinkList &amp;L, ElemType e)</span></span>; <span class="comment">//表尾添加结点</span></span><br><span class="line"><span class="function">Status <span class="title">DestroyList</span><span class="params">(LinkList &amp;L)</span></span>;<span class="comment">//销毁结点</span></span><br><span class="line"><span class="function">Status <span class="title">ListTraverse</span><span class="params">(LinkList L)</span></span>;<span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLenght</span><span class="params">(LinkList L)</span></span>;<span class="comment">//返回表长</span></span><br><span class="line"><span class="function">Status <span class="title">Prior</span><span class="params">(LinkList &amp;L)</span></span>;<span class="comment">//指向其前驱</span></span><br><span class="line"><span class="function">Status <span class="title">Next</span><span class="params">(LinkList &amp;L)</span></span>;<span class="comment">//改变当前指针指向其后继</span></span><br><span class="line"><span class="function">Status <span class="title">InsAfter</span><span class="params">(LinkList &amp;L, ElemType e)</span></span>;<span class="comment">//将e插入在当前指针所指数据元素之后</span></span><br><span class="line"><span class="function">Status <span class="title">ListEmply</span><span class="params">(LinkList L)</span></span>;<span class="comment">//判断表空</span></span><br><span class="line"><span class="function">Status <span class="title">LocateElem</span><span class="params">(LinkList &amp;L, ElemType e)</span></span>;<span class="comment">//改变当前指针指向第i个结点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-一元多项式+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatPolun</span><span class="params">(polynomail &amp;p, <span class="keyword">int</span> m)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(term a, term b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">cmpNode</span><span class="params">(polynomail &amp;L, ElemType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">TailNode</span><span class="params">(polynomail &amp;L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddPolyn</span><span class="params">(polynomail &amp;pa, polynomail &amp;pb)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InsFrist</span><span class="params">(polynomail &amp;L, pnode &amp;p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">SetCurElem</span><span class="params">(LinkList &amp;L, ElemType e)</span></span>;<span class="comment">//更新当前指针所指向的元素</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DelFirst</span><span class="params">(LinkList &amp;L, pnode &amp;p)</span></span>;<span class="comment">//删除当前结点</span></span><br><span class="line"><span class="function">Status <span class="title">Append</span><span class="params">(LinkList &amp;L, pnode &amp;s)</span></span>; <span class="comment">//给当前链表链接一个链表</span></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><h5 id="2-2-一元多项式创建函数"><a href="#2-2-一元多项式创建函数" class="headerlink" title="2.2 一元多项式创建函数"></a>2.2 一元多项式创建函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatPolun</span><span class="params">(polynomail &amp;p, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">InitList(p);</span><br><span class="line">pnode h = p.head;</span><br><span class="line">ElemType e;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d个数据:\n&quot;</span>,i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;系数：&quot;</span>); <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;e.coef);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;指数：&quot;</span>); <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e.expn);</span><br><span class="line"><span class="keyword">if</span> (!LocateElem(p, e)) </span><br><span class="line">&#123;</span><br><span class="line">cmpNode(p, e);<span class="comment">//寻前驱</span></span><br><span class="line">InsAfter(p, e);<span class="comment">//将 e 插入游标节点后面</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-3-两个一元多项式链表相加函数"><a href="#2-3-两个一元多项式链表相加函数" class="headerlink" title="2.3 两个一元多项式链表相加函数"></a>2.3 两个一元多项式链表相加函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddPolyn</span><span class="params">(polynomail &amp;pa, polynomail &amp;pb)</span><span class="comment">//链接在pa上</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">polynomail ha, hb;</span><br><span class="line">pnode qa, qb;</span><br><span class="line">ha = pa; hb = pb;</span><br><span class="line">ha.current = ha.head;</span><br><span class="line">hb.current = hb.head;</span><br><span class="line">qa = ha.current-&gt;next;</span><br><span class="line">qb = hb.current-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (qa&amp;&amp;qb)</span><br><span class="line">&#123;</span><br><span class="line">term a, b;</span><br><span class="line">a = qa-&gt;data; b = qb-&gt;data;</span><br><span class="line"><span class="keyword">switch</span> (cmp(a, b))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">ha.current = qa-&gt;next;</span><br><span class="line">qa = qa-&gt;next; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">term sum;</span><br><span class="line">sum.coef = a.coef + b.coef;</span><br><span class="line">sum.expn = a.expn;</span><br><span class="line"><span class="keyword">if</span> (sum.coef != <span class="number">0.0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ha.current = qa;</span><br><span class="line">SetCurElem(ha, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">DelFirst(ha, qa);</span><br><span class="line">&#125;</span><br><span class="line">DelFirst(hb, qb);</span><br><span class="line">qb = qb-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">InsFrist(ha, qb);</span><br><span class="line">DelFirst(hb, qb);</span><br><span class="line"><span class="comment">//ha.current = ha.current-&gt;next-&gt;next;</span></span><br><span class="line">qb = qb-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ListEmply(hb)) Append(ha, hb.head);</span><br><span class="line">pa.len = ha.len;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-表头链表函数实现-polynomail-h"><a href="#3-表头链表函数实现-polynomail-h" class="headerlink" title="3. 表头链表函数实现 polynomail.h"></a>3. 表头链表函数实现 polynomail.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L.head = (pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">L.tail = (pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">L.current = (pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">L.head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">L.head-&gt;data.coef = <span class="number">0.0</span>;</span><br><span class="line">L.head-&gt;data.expn = <span class="number">-1</span>;</span><br><span class="line">L.len = <span class="number">0</span>;</span><br><span class="line">L.tail = L.current = L.head;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">CreateList</span><span class="params">(LinkList &amp;L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L.head) <span class="keyword">return</span> ERROR;</span><br><span class="line">pnode p;</span><br><span class="line">p = (pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">L.tail-&gt;next = p;</span><br><span class="line">L.tail = p;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">L.len++;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DestroyList</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ListEmply(L)) <span class="keyword">return</span> ok;</span><br><span class="line"></span><br><span class="line">pnode p;</span><br><span class="line">L.current = L.head-&gt;next;</span><br><span class="line">p = L.current-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != L.tail)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(L.current);</span><br><span class="line">--L.len;</span><br><span class="line">L.head-&gt;next = p;</span><br><span class="line">L.current = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">L.tail = L.head;</span><br><span class="line">L.current = L.head;</span><br><span class="line">--L.len;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListTraverse</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pnode p;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">p = L.head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Q(x)=%.2lfx^%d+&quot;</span>, p-&gt;data.coef, p-&gt;data.expn);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i!=L.len)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lfx^%d+&quot;</span>, p-&gt;data.coef, p-&gt;data.expn);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lfx^%d&quot;</span>, p-&gt;data.coef, p-&gt;data.expn);</span><br><span class="line">++i;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLenght</span><span class="params">(LinkList L)</span><span class="comment">//返回表长</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Prior</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pnode p;</span><br><span class="line"><span class="keyword">if</span> (L.head == L.current) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L.head;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != L.current)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">L.current = p;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Next</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L.current-&gt;next) <span class="keyword">return</span> ERROR;</span><br><span class="line">L.current = L.current-&gt;next;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListEmply</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L.head == L.tail) <span class="keyword">return</span> ok;<span class="comment">//空位真 ，非空位假</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">LocateElem</span><span class="params">(LinkList &amp;L, ElemType e)</span><span class="comment">//判断是否存在即可</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pnode p;</span><br><span class="line"><span class="keyword">if</span> (ListEmply(L)) <span class="keyword">return</span> ERROR;</span><br><span class="line">p = L.head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data.expn == e.expn)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="comment">//L.current = p;</span></span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(term a, term b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.expn &gt; b.expn) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a.expn == b.expn) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a.expn &lt; b.expn) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">cmpNode</span><span class="params">(polynomail &amp;L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pnode p;</span><br><span class="line"><span class="keyword">if</span> (ListEmply(L)) <span class="keyword">return</span> ok;</span><br><span class="line">p = L.head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data.expn &gt; e.expn)</span><br><span class="line">&#123;</span><br><span class="line">L.current = p;</span><br><span class="line">Prior(L);</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">L.current = L.tail;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatPolun</span><span class="params">(polynomail &amp;p, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">InitList(p);</span><br><span class="line">pnode h = p.head;</span><br><span class="line">ElemType e;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d个数据:\n&quot;</span>,i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;系数：&quot;</span>); <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;e.coef);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;指数：&quot;</span>); <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e.expn);</span><br><span class="line"><span class="keyword">if</span> (!LocateElem(p, e)) </span><br><span class="line">&#123;</span><br><span class="line">cmpNode(p, e);<span class="comment">//寻前驱</span></span><br><span class="line">InsAfter(p, e);<span class="comment">//将 e 插入游标节点后面</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">TailNode</span><span class="params">(polynomail &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pnode p;</span><br><span class="line">p = L.current;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">L.tail = p;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InsAfter</span><span class="params">(LinkList &amp;L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!L.head) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="comment">//? Prior(L);</span></span><br><span class="line">pnode p;</span><br><span class="line">p = (pnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = L.current-&gt;next;</span><br><span class="line">L.current-&gt;next = p;</span><br><span class="line"><span class="keyword">if</span>(L.tail-&gt;next)</span><br><span class="line">TailNode(L);</span><br><span class="line">++L.len;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddPolyn</span><span class="params">(polynomail &amp;pa, polynomail &amp;pb)</span><span class="comment">//链接在pa上</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">polynomail ha, hb;</span><br><span class="line">pnode qa, qb;</span><br><span class="line">ha = pa; hb = pb;</span><br><span class="line">ha.current = ha.head;</span><br><span class="line">hb.current = hb.head;</span><br><span class="line">qa = ha.current-&gt;next;</span><br><span class="line">qb = hb.current-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (qa&amp;&amp;qb)</span><br><span class="line">&#123;</span><br><span class="line">term a, b;</span><br><span class="line">a = qa-&gt;data; b = qb-&gt;data;</span><br><span class="line"><span class="keyword">switch</span> (cmp(a, b))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">ha.current = qa-&gt;next;</span><br><span class="line">qa = qa-&gt;next; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">term sum;</span><br><span class="line">sum.coef = a.coef + b.coef;</span><br><span class="line">sum.expn = a.expn;</span><br><span class="line"><span class="keyword">if</span> (sum.coef != <span class="number">0.0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ha.current = qa;</span><br><span class="line">SetCurElem(ha, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">DelFirst(ha, qa);</span><br><span class="line">&#125;</span><br><span class="line">DelFirst(hb, qb);</span><br><span class="line">qb = qb-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">InsFrist(ha, qb);</span><br><span class="line">DelFirst(hb, qb);</span><br><span class="line"><span class="comment">//ha.current = ha.current-&gt;next-&gt;next;</span></span><br><span class="line">qb = qb-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ListEmply(hb)) Append(ha, hb.head);</span><br><span class="line">pa.len = ha.len;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">SetCurElem</span><span class="params">(LinkList &amp;L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ListEmply(L)) <span class="keyword">return</span> ERROR;</span><br><span class="line">L.current-&gt;data = e;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">DelFirst</span><span class="params">(LinkList &amp;L, pnode &amp;p)</span><span class="comment">//当前结点前面一个结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ListEmply(L)) <span class="keyword">return</span> ERROR;</span><br><span class="line">pnode la;</span><br><span class="line">la = L.head;</span><br><span class="line"><span class="keyword">while</span> (la-&gt;next != p)</span><br><span class="line">la = la-&gt;next;</span><br><span class="line">la-&gt;next = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">--L.len;</span><br><span class="line">p = la;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">InsFrist</span><span class="params">(polynomail &amp;L, pnode &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Prior(L);</span><br><span class="line">InsAfter(L, p-&gt;data);</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Append</span><span class="params">(LinkList &amp;L, pnode &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pnode p;</span><br><span class="line">L.tail-&gt;next = s-&gt;next;</span><br><span class="line">p = s;</span><br><span class="line"><span class="comment">//ListTraverse(L);</span></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">L.len++;</span><br><span class="line">&#125;</span><br><span class="line">L.tail = p;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-1-polynomail-cpp-测试主函数-main"><a href="#3-1-polynomail-cpp-测试主函数-main" class="headerlink" title="3.1 polynomail.cpp  测试主函数 main()"></a>3.1 polynomail.cpp  测试主函数 main()</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一元多项式 main()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">测试数据：第一组</span></span><br><span class="line"><span class="comment">&#123;&lt;3,7&gt;，&lt;2,9&gt;，&lt;9,3&gt;，&lt;6,8&gt;&#125;</span></span><br><span class="line"><span class="comment">&#123;&lt;10,12&gt;,&lt;4,2&gt;,&lt;5,6&gt;,&lt;17,7&gt;,&lt;15,16&gt;,&lt;4,8&gt;&#125;</span></span><br><span class="line"><span class="comment">eg:这组测试数据不含指数相同，系数相加等于0的情况</span></span><br><span class="line"><span class="comment">测试结果:Q(x)=4.00x^2+9.00x^3+5.00x^6+10.00x^8+2.00x^9+10.00x^12+15.00x^16</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">测试数据：第二组</span></span><br><span class="line"><span class="comment">&#123;&lt;3,7&gt;，&lt;2,9&gt;，&lt;9,3&gt;，&lt;6,8&gt;&#125;</span></span><br><span class="line"><span class="comment">&#123;&lt;10,12&gt;,&lt;4,2&gt;,&lt;5,6&gt;,&lt;17,7&gt;,&lt;15,16&gt;,&lt;4,8&gt;&#125;</span></span><br><span class="line"><span class="comment">eg:这组测试数据含指数相同，系数相加等于0的情况</span></span><br><span class="line"><span class="comment">测试结果:Q(x)=4.00x^2+9.00x^3+5.00x^6+20.00x^7+10.00x^8+2.00x^9+10.00x^12+15.00x^16</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">polynomail pa,pb;</span><br><span class="line">CreatPolun(pa, <span class="number">4</span>);</span><br><span class="line">CreatPolun(pb, <span class="number">6</span>);</span><br><span class="line">ListTraverse(pa);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">ListTraverse(pb);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">AddPolyn(pa, pb);</span><br><span class="line">ListTraverse(pa);</span><br><span class="line"><span class="comment">//printf(&quot;%d,%d&quot;, pa.tail-&gt;data.expn,pa.len);</span></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-双向循环链表的实现"><a href="#2-4-双向循环链表的实现" class="headerlink" title="2.4 双向循环链表的实现"></a>2.4 双向循环链表的实现</h3><p>没什么好看到直接放完整的代码</p><h4 id="2-4-1-DoubleList-h"><a href="#2-4-1-DoubleList-h" class="headerlink" title="2.4.1 DoubleList.h"></a>2.4.1 DoubleList.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ok 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> &#123;</span>  <span class="comment">//循环双向链表</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> *<span class="title">prior</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;DuLNode,*DuLinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">DuLinkList <span class="title">InitDuList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">CreateDuList</span><span class="params">(DuLinkList &amp;L, ElemType e)</span></span>;<span class="comment">//表尾添加结点</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DelDuList</span><span class="params">(DuLinkList &amp;L,ElemType e)</span></span>;<span class="comment">//删除结点</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InsertDuList</span><span class="params">(DuLinkList &amp;L, <span class="keyword">int</span> i, ElemType e)</span></span>;<span class="comment">//插入结点</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DuListTraverse</span><span class="params">(DuLinkList &amp;L)</span></span>;<span class="comment">//遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"></span><br><span class="line"><span class="function">DuLinkList <span class="title">InitDuList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DuLinkList h;</span><br><span class="line">h = (DuLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));</span><br><span class="line"><span class="keyword">if</span> (!h)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">h-&gt;data = <span class="number">-1</span>;</span><br><span class="line">h-&gt;next = h;</span><br><span class="line">h-&gt;prior = h;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">CreateDuList</span><span class="params">(DuLinkList &amp;L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DuLinkList p, q;</span><br><span class="line">p = L;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != L)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">q = (DuLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));</span><br><span class="line">q-&gt;data = e;</span><br><span class="line"></span><br><span class="line">p-&gt;next = q;</span><br><span class="line">q-&gt;next = L;</span><br><span class="line">q-&gt;prior = p;</span><br><span class="line">L-&gt;prior = q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">DelDuList</span><span class="params">(DuLinkList &amp;L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DuLinkList p;</span><br><span class="line">p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != L &amp;&amp; p-&gt;data != e)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data==e)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;prior-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior = p-&gt;prior;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InsertDuList</span><span class="params">(DuLinkList &amp;L, <span class="keyword">int</span> i, ElemType e)</span><span class="comment">//第i个位子之前插入结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DuLinkList p,s;</span><br><span class="line">p = L-&gt;next;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;next == L &amp;&amp; i &lt; j) <span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">while</span> (j &lt; i&amp;&amp;p-&gt;next != L)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next == L) <span class="keyword">return</span> ERROR;</span><br><span class="line">s = (DuLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));</span><br><span class="line">s-&gt;data = e;</span><br><span class="line">s-&gt;prior = p-&gt;prior;</span><br><span class="line">s-&gt;next = p;</span><br><span class="line">p-&gt;prior-&gt;next = s;</span><br><span class="line">p-&gt;prior = s;</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">DuListTraverse</span><span class="params">(DuLinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DuLinkList p;</span><br><span class="line">p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, p-&gt;data);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-DoubleList-cpp"><a href="#2-4-2-DoubleList-cpp" class="headerlink" title="2.4.2 DoubleList.cpp"></a>2.4.2 DoubleList.cpp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;doubleList.h&quot;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>] = &#123; <span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DuLinkList p;</span><br><span class="line">p=InitDuList();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">CreateDuList(p,a[i]);</span><br><span class="line">DuListTraverse(p);</span><br><span class="line"></span><br><span class="line">DelDuList(p, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">DuListTraverse(p);</span><br><span class="line"></span><br><span class="line">InsertDuList(p, <span class="number">9</span>, <span class="number">69</span>);</span><br><span class="line">DuListTraverse(p);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;2-1单链表&quot;&gt;&lt;a href=&quot;#2-1单链表&quot; class=&quot;headerlink&quot; title=&quot;2.1单链表&quot;&gt;&lt;/a&gt;2.1单链表&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;学习严蔚敏教授的课程很痛苦，但做为一门数据结构这门课程，也没人能与严</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/09/18/hello-world/"/>
    <id>http://example.com/2020/09/18/hello-world/</id>
    <published>2020-09-18T04:24:52.278Z</published>
    <updated>2020-09-17T12:43:55.855Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
